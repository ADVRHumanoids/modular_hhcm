<?xml version="1.0"?>
<robot name="ModularBot" xmlns:xacro="http://www.ros.org/wiki/xacro">
   
    <xacro:property name="size1" value="0.0335" />
    <xacro:property name="size2" value="0.038" />
    <xacro:property name="size3" value="0.043" />
    <xacro:property name="size4" value="0.053" />
    <xacro:property name="size5" value="0.069" />

    <xacro:property name="size_interface" value="0.045" />
    <xacro:property name="len1" value="0.4" />
    <xacro:property name="len2" value="0.6" />
    <xacro:property name="len3" value="0.8" />
    <xacro:property name="mass" value="0.001" />

    <material name="blue">
        <color rgba="0 0 0.8 1"/>
    </material>

    <material name="black">
        <color rgba="0 0 0 1"/>
    </material>

    <material name="white">
        <color rgba="1 1 1 1"/>
    </material>

    <material name="grey">
        <color rgba="0.5 0.5 0.5 1"/>
    </material>

    <material name="red">
        <color rgba="1 0 0 1"/>
    </material>

    <material name="green">
        <color rgba="0 1 0 1"/>
    </material>

    <material name="yellow">
        <color rgba="1 1 0 1"/>
    </material>

    <material name="tree_green">
        <color rgba="0.13 0.54 0.13 1"/>
    </material>

    <xacro:macro name="default_inertial" params="mass">
        <inertial>
            <mass value="${mass}" />
            <inertia ixx="1.0e-06" ixy="0.0" ixz="0.0" iyy="1.0e-06" iyz="0.0" izz="1.0e-06" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="add_geometry" params="body">
        <geometry>
            <xacro:if value="${body['type'] == 'mesh'}">
                <mesh filename="${body['parameters']['file']}" scale="${' '.join(str(x) for x in body['parameters']['scale'])}"/>
            </xacro:if>
            <xacro:if value="${body['type'] == 'cylinder'}">
                <cylinder radius="${body['parameters']['radius']}" length="${body['parameters']['length']}"/>
            </xacro:if>
            <xacro:if value="${body['type'] == 'box'}">
                <box size="${body['parameters']['size']}"/>
            </xacro:if>
            <xacro:if value="${body['type'] == 'sphere'}">
                <sphere radius="${body['parameters']['radius']}"/>
            </xacro:if>
        </geometry>
    </xacro:macro>

    <xacro:macro name="add_origin" params="body_pose">
        <origin
            rpy="${body_pose['roll']} ${body_pose['pitch']} ${body_pose['yaw']}"
            xyz="${body_pose['x']} ${body_pose['y']} ${body_pose['z']}"/>
    </xacro:macro>

    <xacro:macro name="add_link_element" params="name type module body_name">
        
        <xacro:property name="visual_bool" value="false"/>
        <xacro:unless value="${not module['visual'][body_name]}">
            <xacro:property name="visual_bool" value="true"/>
            <xacro:property name="visual_bodies" value="${module['visual'][body_name]}"/>
        </xacro:unless>

        <xacro:property name="collision_bool" value="false"/>
        <xacro:unless value="${not module['collision'][body_name]}">
            <xacro:property name="collision_bool" value="true"/>
            <xacro:property name="collision_bodies" value="${module['collision'][body_name]}"/>
        </xacro:unless>

        <xacro:property name="dynamics_bool" value="false"/>
        <xacro:unless value="${module['dynamics'][body_name]['mass'] == 0 }">
            <xacro:property name="dynamics_bool" value="true"/>
            <xacro:property name="dynamics_body" value="${module['dynamics'][body_name]}"/>
        </xacro:unless>
        
        <link name="${name}">
            <xacro:unless value="${visual_bool == 0}">
                <!-- xacro loop -->
                <xacro:macro name="visual_loop" params="visual_bodies n_bodies">
                    <xacro:property name="i_bodies" value="${n_bodies-1}"/>
                    <xacro:unless value="${i_bodies == -1}"> 
                        <visual>    
                            <xacro:property name="body" value="${visual_bodies[i_bodies]}"/>
                            <xacro:add_origin body_pose="${body['pose']}"/>
                            <xacro:add_geometry body="${body}"/>
                            <xacro:if value="${'color' in body['parameters']}">
                                <material name="${body['parameters']['color']['material_name']}">
                                <xacro:if value="${'rgba' in body['parameters']['color']}">
                                    <color rgba="${' '.join(str(x) for x in body['parameters']['color']['rgba'])}"/>
                                </xacro:if>
                                </material>
                            </xacro:if>
                        </visual>
                        <xacro:visual_loop visual_bodies="${visual_bodies}" n_bodies="${i_bodies}"/>
                    </xacro:unless> 
                </xacro:macro>
                <!-- call the macro -->
                <xacro:visual_loop visual_bodies="${visual_bodies}" n_bodies="${len(visual_bodies)}"/>
            </xacro:unless>
            <xacro:unless value="${collision_bool == 0}">
                <!-- xacro loop -->
                <xacro:macro name="collision_loop" params="collision_bodies n_bodies">
                    <xacro:property name="i_bodies" value="${n_bodies-1}"/>
                    <xacro:unless value="${i_bodies == -1}"> 
                        <collision>
                            <xacro:property name="body" value="${collision_bodies[i_bodies]}"/>
                            <xacro:add_origin body_pose="${body['pose']}"/>
                            <xacro:add_geometry body="${body}"/>
                        </collision>
                        <xacro:collision_loop collision_bodies="${collision_bodies}" n_bodies="${i_bodies}"/>
                    </xacro:unless>
                </xacro:macro> 
                <!-- call the macro -->
                <xacro:collision_loop collision_bodies="${collision_bodies}" n_bodies="${len(collision_bodies)}"/>
            </xacro:unless>
            <xacro:if value="${dynamics_bool == 0}">
                <xacro:default_inertial mass="${mass}"/>
            </xacro:if>
            <xacro:unless value="${dynamics_bool == 0}">
                <inertial>
                    <origin
                        xyz="${dynamics_body['CoM']['x']} ${dynamics_body['CoM']['y']} ${dynamics_body['CoM']['z']}"
                        rpy="0 0 0"/>
                    <mass value="${dynamics_body['mass']}"/>
                    <inertia
                        ixx="${dynamics_body['inertia_tensor']['I_xx']}"
                        ixy="${dynamics_body['inertia_tensor']['I_xy']}"
                        ixz="${dynamics_body['inertia_tensor']['I_xz']}"
                        iyy="${dynamics_body['inertia_tensor']['I_yy']}"
                        iyz="${dynamics_body['inertia_tensor']['I_yz']}"
                        izz="${dynamics_body['inertia_tensor']['I_zz']}"/>
                </inertial>
            </xacro:unless>
        </link>
    </xacro:macro>

    <!-- Macro for adding dagana -->       
    <xacro:macro name="add_dagana" params="name type father x y z roll pitch yaw">
        <xacro:include filename="$(find dagana_urdf)/urdf/dagana_macro.urdf.xacro" />

        <xacro:dagana_gripper name="${name}" parent_link="${father}" joint_type="revolute">
            <origin xyz="${x} ${y} ${z}" rpy="${roll} ${pitch} ${yaw}"/>
        </xacro:dagana_gripper>
    </xacro:macro>

    <!-- Macro for adding the drill module -->       
    <xacro:macro name="add_drill" params="name type filename">
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
        <!-- Add realsense D camera -->
        <xacro:include filename="${MODULAR_PATH}/modular_data/urdf/concert.sensors.urdf.xacro"/>
        <xacro:add_realsense_d_camera name="drill_camera" parent_name="${name}" add_gazebo_sensor="${ADD_DRILL_CAMERA}">
            <origin xyz="0.12 0.0 0.26" rpy="0.05 0.22 0.05"/>
        </xacro:add_realsense_d_camera>
    </xacro:macro>

    <!-- Macro for adding a generic link -->       
    <xacro:macro name="add_link" params="name type filename">
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
    </xacro:macro>

    <!-- Macro for adding the proximal part of the joint (the physical module housing the actuator) -->
    <xacro:macro name="add_proximal" params="type name filename">
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
    </xacro:macro>

    <!-- Macro for adding the distal part of the joint -->
    <xacro:macro name="add_distal" params="type name filename">
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_2"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
    </xacro:macro>

    <!-- Macro for adding the joint. A dummy link is also added with no visual tag, but with inertial parameters corresponding to the rotating part -->
    <xacro:macro name="add_joint" params="type name father child x y z roll pitch yaw upper_lim lower_lim effort velocity">
        <joint name="${name}" type="revolute">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="${father}"/>
            <child link="${child}"/>
            <origin xyz="${x} ${y} ${z}" rpy="${roll} ${pitch} ${yaw}"/>
            <limit lower="${lower_lim}" upper="${upper_lim}" effort="${effort}" velocity="${velocity}"/>
        </joint>
    </xacro:macro>

    <!-- Macro for adding a fixed joint (rigid interconnection between links and statoric part of the joint) -->
    <xacro:macro name="add_fixed_joint" params="type name father child x y z roll pitch yaw">
        <joint name="${name}" type="fixed">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="${father}"/>
            <child link="${child}"/>
            <origin xyz="${x} ${y} ${z}" rpy="${roll} ${pitch} ${yaw}"/>
        </joint>
    </xacro:macro>

    <xacro:macro name="add_rotor_fast" params="type name filename x y z roll pitch yaw">

        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="gear_ratio" value="${module['actuator_data']['gear_ratio']}"/>

        <link name="${name}">
            <inertial>
                <origin
                        xyz="${module['dynamics']['body_2_fast']['CoM']['x']} ${module['dynamics']['body_2_fast']['CoM']['y']} ${module['dynamics']['body_2_fast']['CoM']['z']}"
                        rpy="0 0 0"/>
                    <mass value="${module['dynamics']['body_2_fast']['mass']}"/>
                    <inertia
                        ixx="${module['dynamics']['body_2_fast']['inertia_tensor']['I_xx']}"
                        ixy="${module['dynamics']['body_2_fast']['inertia_tensor']['I_xy']}"
                        iyy="${module['dynamics']['body_2_fast']['inertia_tensor']['I_yy']}"
                        ixz="${module['dynamics']['body_2_fast']['inertia_tensor']['I_xz'] }"
                        iyz="${module['dynamics']['body_2_fast']['inertia_tensor']['I_yz'] }"
                        izz="${ gear_ratio * gear_ratio * module['dynamics']['body_2_fast']['inertia_tensor']['I_zz'] }"/>

            </inertial>
        </link>
    </xacro:macro>

    <!-- Macro for adding a mobile base -->
    <xacro:macro name="add_mobile_base" params="name filename type">

        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>

        <joint name="fixed" type="fixed">
            <parent link="base_link"/>
            <child link="${name}"/>
            <axis rpy="0 0 0" xyz="0 0 1"/>
            <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
        </joint>

        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
        
        <xacro:include filename="${MODULAR_PATH}/modular_data/urdf/concert.sensors.urdf.xacro"/>
        <xacro:add_mobile_base_sensors parent_name="${name}"/>

    </xacro:macro>

    <!-- Macro for adding a master cube -->
    <xacro:macro name="add_master_cube" params="name filename type">

        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>

        <joint name="fixed" type="fixed">
            <parent link="base_link"/>
            <child link="${name}"/>
            <axis rpy="0 0 0" xyz="0 0 1"/>
            <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.0"/>
        </joint>

        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>

    </xacro:macro>

    <xacro:macro name="add_connector" params="name type parent_name x y z roll pitch yaw">

        <link name="${name}">
            <visual>
                <origin rpy="0 0 0" xyz="0 0 0.05"/>
                <geometry>
                    <cylinder length="0.1" radius="${size_interface}"/>
                </geometry>
                <material name="green"/>
            </visual>
        </link>

        <joint name="${name}_fixed" type="fixed">
            <parent link="${parent_name}"/>
            <child link="${name}"/>
            <axis rpy="0 0 0" xyz="0 0 1"/>
            <origin rpy="${roll} ${pitch} ${yaw}"
                    xyz="${x} ${y} ${z}"/>
        </joint>

    </xacro:macro>

    <!-- Macro for adding a slave cube -->
    <xacro:macro name="add_slave_cube" params="name filename type">

        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
        
    </xacro:macro>

    <!-- Macro for adding a socket -->
    <xacro:macro name="add_socket" params="name type filename size">

        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>

    </xacro:macro>

    <!-- Macro for adding a size adapter -->
    <xacro:macro name="add_size_adapter" params="type name filename size_z">

         <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        
        <xacro:property name="mesh_bool" value="false"/>
        <xacro:unless value="${ module['visual']['mesh_body_1'] == '' }">
            <xacro:property name="mesh_bool" value="true"/>
        </xacro:unless>

        <xacro:if value="${mesh_bool}">

            <link name="${name}">
                <visual>
                    <origin
                        rpy="${module['visual']['tf_mesh_1']['roll']} ${module['visual']['tf_mesh_1']['pitch']} ${module['visual']['tf_mesh_1']['yaw']}"
                        xyz="${module['visual']['tf_mesh_1']['x']} ${module['visual']['tf_mesh_1']['y']} ${module['visual']['tf_mesh_1']['z']}"/>
                    <geometry>
                        <mesh filename="${module['visual']['mesh_body_1']}" scale="0.001 0.001 0.001"/>
                    </geometry>
                    <material name="tree_green"/>
                </visual>
                <collision>
                    <origin
                        rpy="${module['visual']['tf_mesh_1']['roll']} ${module['visual']['tf_mesh_1']['pitch']} ${module['visual']['tf_mesh_1']['yaw']}"
                        xyz="${module['visual']['tf_mesh_1']['x']} ${module['visual']['tf_mesh_1']['y']} ${module['visual']['tf_mesh_1']['z']}"/>
                    <geometry>
                        <mesh filename="${module['visual']['mesh_collision_1']}" scale="0.001 0.001 0.001"/>
                    </geometry>
                </collision>
                <inertial>
                    <origin
                        xyz="${module['dynamics']['body_1']['CoM']['x']} ${module['dynamics']['body_1']['CoM']['y']} ${module['dynamics']['body_1']['CoM']['z']}"
                        rpy="0 0 0"/>
                    <mass value="${module['dynamics']['body_1']['mass']}"/>
                    <inertia
                        ixx="${module['dynamics']['body_1']['inertia_tensor']['I_xx']}"
                        ixy="${module['dynamics']['body_1']['inertia_tensor']['I_xy']}"
                        ixz="${module['dynamics']['body_1']['inertia_tensor']['I_xz']}"
                        iyy="${module['dynamics']['body_1']['inertia_tensor']['I_yy']}"
                        iyz="${module['dynamics']['body_1']['inertia_tensor']['I_yz']}"
                        izz="${module['dynamics']['body_1']['inertia_tensor']['I_zz']}"/>
                </inertial>
            </link>
        
        </xacro:if>
        <xacro:unless value="${mesh_bool}">

            <xacro:if value="${module['size_in']=='big'}">
                <xacro:property name="radius3" value="${size3}" />
            </xacro:if>
            <xacro:unless value="${module['size_in']=='big'}">
                <xacro:if value="${module['size_in']=='medium'}">
                    <xacro:property name="radius2" value="${size2}" />
                </xacro:if>
                <xacro:unless value="${module['size_in']=='medium}">
                    <!-- ERROR! -->
                </xacro:unless>
            </xacro:unless>

            <xacro:if value="${module['size_out']=='big'}">
                <!-- ERROR! -->
            </xacro:if>
            <xacro:unless value="${module['size_out']=='big'}">
                <xacro:if value="${module['size_out']=='medium'}">
                    <xacro:property name="radius2" value="${size2}" />
                </xacro:if>
                <xacro:unless value="${module['size_out']=='medium'}">
                    <xacro:property name="radius1" value="${size1}" />
                </xacro:unless>
            </xacro:unless>

            <link name="${name}">
                <visual>
                    <origin xyz="0 0 ${size_z/4}" rpy="0 0 0" />
                    <geometry>
                        <cylinder radius="${radius1}" length="${size_z/2}"/>
                    </geometry>
                    <material name="grey"/>
                </visual>
                <visual>
                    <origin xyz="0 0 ${3*size_z/4}" rpy="0 0 0" />
                    <geometry>
                        <cylinder radius="${radius2}" length="${size_z/2}"/>
                    </geometry>
                    <material name="grey"/>
                </visual>
                <collision>
                    <origin xyz="0 0 ${size_z/4}" rpy="0 0 0" />
                    <geometry>
                        <cylinder radius="${radius1}" length="${size_z/2}"/>
                    </geometry>
                </collision>
                <collision>
                    <origin xyz="0 0 ${3*size_z/4}" rpy="0 0 0" />
                    <geometry>
                        <cylinder radius="${radius2}" length="${size_z/2}"/>
                    </geometry>
                </collision>
                <inertial>
                    <origin xyz="0 0 ${size_z/2}" rpy="0 0 0"/>
                    <mass value="${mass}"/>
                    <inertia
                    ixx="${mass / 12.0 * (3*radius1*radius1 + 4*size_z/2*size_z/2) + mass / 12.0 * (3*radius2*radius2 + 4*size_z/2*size_z/2)}" ixy="0.0" ixz="0.0"
                    iyy="${mass / 12.0 * (3*radius1*radius1 + 4*size_z/2*size_z/2) + mass / 12.0 * (3*radius2*radius2 + 4*size_z/2*size_z/2)}" iyz="0.0"
                    izz="${mass / 4.0 * (radius1*radius1) + mass / 4.0 * (radius2*radius2)}"/>
                </inertial>
            </link>
        
        </xacro:unless>

    </xacro:macro>

    <xacro:macro name="add_tool_exchanger" params="type name filename">
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
    </xacro:macro>

    <!-- Add a pen to the tool-exchanger. Length may vary -->
    <xacro:macro name="add_pen" params="type name father">
        <link name="${name}"/>
        <joint name="fixed_${name}" type="fixed">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="${father}"/>
            <child link="${name}"/>
            <origin xyz="0.0 0.0 0.222" rpy="0.0 0.0 0.0"/>
        </joint>
    </xacro:macro>

    <!-- Add a tcp. Length may vary -->
    <xacro:macro name="add_tcp" params="type name father filename x y z roll pitch yaw">
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>

        <link name="${name}"/>
        <joint name="fixed_${name}" type="fixed">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="${father}"/>
            <child link="${name}"/>
            <origin
            rpy="${roll} ${pitch} ${yaw}"
            xyz="${x} ${y} ${z}"/>
        </joint>
    </xacro:macro>

    <xacro:macro name="add_gripper_body" params="type name filename">
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_1"/>
        <xacro:add_link_element name="${name}" type="${type}" module="${module}" body_name="${body_name}"/>
    </xacro:macro>
        
    <xacro:macro name="add_gripper_fingers" params="type name joint_name_finger1 joint_name_finger2 TCP_name filename">
        <!-- add fingers -->
        <xacro:property name="module" value="${xacro.load_yaml(filename)}"/>
        <xacro:property name="body_name" value="body_2"/>
        <xacro:add_link_element name="${name}_finger1" type="${type}" module="${module}" body_name="${body_name}"/>
        <!-- add the right finger (same mesh rotated by pi!) -->
        <link name="${name}_finger2">
            <visual>
                <xacro:add_origin body_pose="${dict(x=0.0, y=0.0, z=0.0, roll=0.0, pitch=0.0, yaw=pi)}"/>
                <xacro:add_geometry body="${module['visual'][body_name][0]}"/>
                <xacro:if value="${'color' in module['visual'][body_name][0]['parameters']}">
                    <material name="${module['visual'][body_name][0]['parameters']['color']}"/>
                </xacro:if> 
            </visual>
            <collision>
                <xacro:add_origin body_pose="${dict(x=0.0, y=0.0, z=0.0, roll=0.0, pitch=0.0, yaw=pi)}"/>
                <xacro:add_geometry body="${module['collision'][body_name][0]}"/>
            </collision>
            <inertial>
                <origin
                    xyz="${module['dynamics'][body_name]['CoM']['x']} ${module['dynamics'][body_name]['CoM']['y']} ${module['dynamics'][body_name]['CoM']['z']}"
                    rpy="0 0 0"/>
                <mass value="${module['dynamics'][body_name]['mass']}"/>
                <inertia
                    ixx="${module['dynamics'][body_name]['inertia_tensor']['I_xx']}"
                    ixy="${module['dynamics'][body_name]['inertia_tensor']['I_xy']}"
                    ixz="${module['dynamics'][body_name]['inertia_tensor']['I_xz']}"
                    iyy="${module['dynamics'][body_name]['inertia_tensor']['I_yy']}"
                    iyz="${module['dynamics'][body_name]['inertia_tensor']['I_yz']}"
                    izz="${module['dynamics'][body_name]['inertia_tensor']['I_zz']}"/>
            </inertial>
        </link>

        <!-- Add joints -->
        <joint name="${joint_name_finger1}" type="${module['actuator_data']['type']}">
            <parent link="${name}"/>
            <child link="${name}_finger1"/>
            <origin xyz="0 0 ${module['kinematics']['joint']['proximal']['p_pl']}" rpy="0 0 0"/>
            <axis xyz="0 -1 0"/>
            <limit effort="${module['actuator_data']['effort']}"
                lower="${module['actuator_data']['lower_limit']}"
                upper="${module['actuator_data']['upper_limit']}"
                velocity="${module['actuator_data']['velocity']}"
            />
        </joint>
        <joint name="${joint_name_finger2}" type="${module['actuator_data']['type']}">
            <parent link="${name}"/>
            <child link="${name}_finger2"/>
            <origin xyz="0 0 ${module['kinematics']['joint']['proximal']['p_pl']}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
            <limit effort="${module['actuator_data']['effort']}"
                lower="${module['actuator_data']['lower_limit']}"
                upper="${module['actuator_data']['upper_limit']}"
                velocity="${module['actuator_data']['velocity']}"
            />
        </joint>

        <!-- Add TCP -->
        <link name="${TCP_name}"/>
        <joint name="fixed_${name}" type="fixed">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="${name}"/>
            <child link="${TCP_name}"/>
            <origin xyz="0.0 0.0 0.1985" rpy="0.0 0.0 0.0"/>
        </joint>
    </xacro:macro>

    <!-- Add a cylinder -->
    <xacro:macro name="add_cylinder" params="type name size_z mass radius">
        <link name="${name}">
            <visual>
                <origin xyz="0 0 -${size_z/2}" rpy="0 0 0" />
                <geometry>
                    <cylinder radius="${radius}" length="${size_z}"/>
                </geometry>
                <material name="blue"/>
            </visual>
            <collision>
                <origin xyz="0 0 -${size_z/2}" rpy="0 0 0" />
                <geometry>
                    <cylinder radius="${radius}" length="${size_z}"/>
                </geometry>
            </collision>
            <inertial>
                <origin xyz="0 0 ${size_z/2}" rpy="0 0 0"/>
                <mass value="${mass}"/>
                <inertia
                ixx="${mass / 12.0 * (3*radius*radius + size_z*size_z)}" ixy="0.0" ixz="0.0"
                iyy="${mass / 12.0 * (size_z*size_z + 3*radius*radius)}" iyz="0.0"
                izz="${mass / 2.0 * (radius*radius)}"/>
            </inertial>
        </link>
    </xacro:macro>

    <!-- Macro for adding a table -->
    <xacro:macro name="add_table" params="type name father">
        <joint name="fixed_table" type="fixed">
            <axis rpy="0 0 0" xyz="0 0 1"/>
            <parent link="${father}"/>
            <child link="${name}"/>
            <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.01"/>
        </joint>
        <link name="${name}">
            <visual>
                <origin rpy="0 0 0" xyz="0.6 0.3 -0.005"/>
                <geometry>
                    <box size="1.2 0.6 0.01"/>
                </geometry>
                <material name="gray"/>
            </visual>
            <collision>
                <origin rpy="0 0 0" xyz="0.6 0.3 -0.005"/>
                <geometry>
                    <box size="1.2 0.6 0.01"/>
                </geometry>
            </collision>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.00"/>
                <mass value="0.5"/>
                <inertia ixx="0.0006" ixy="0.0" ixz="0.0" iyy="0.0006" iyz="0.0" izz="0.0006"/>
            </inertial>
        </link>
    </xacro:macro>

    <!-- Macro for adding the virtual end-effector -->
    <xacro:macro name="add_virtual_ee" params="type name father x y z roll pitch yaw">
        <joint name="virtual_yaw_joint_1" type="revolute">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="${father}"/>
            <child link="virtual_yaw_link_1"/>
            <origin xyz="${x} ${y} ${z}" rpy="${roll} ${pitch} ${yaw}"/>
            <limit effort="1000" lower="-1000" upper="1000" velocity="1000"/>
        </joint>
        <link name="virtual_yaw_link_1">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.1"/>
                </geometry>
                <material name="blue"/>
            </visual>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.0296308777857"/>
                <mass value="0.5"/>
                <inertia ixx="0.0023807995811" ixy="0.0" ixz="0.0" iyy="0.00184565189114" iyz="0.0" izz="0.00143514768996"/>
            </inertial>
        </link>
        <joint name="virtual_pitch_joint_1" type="revolute">
            <axis xyz="0 1 0" rpy="0 0 0" />
            <parent link="virtual_yaw_link_1"/>
            <child link="virtual_pitch_link_1"/>
            <origin rpy="0.0 -0.0 0.0" xyz="0.0 0.0 0.0"/>
            <limit effort="1000" lower="-1000" upper="1000" velocity="1000"/>
        </joint>
        <link name="virtual_pitch_link_1">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.1"/>
                </geometry>
                <material name="white"/>
            </visual>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.0296308777857"/>
                <mass value="0.5"/>
                <inertia ixx="0.0023807995811" ixy="0.0" ixz="0.0" iyy="0.00184565189114" iyz="0.0" izz="0.00143514768996"/>
            </inertial>
        </link>
        <joint name="virtual_roll_joint_1" type="revolute">
            <axis xyz="1 0 0" rpy="0 0 0" />
            <parent link="virtual_pitch_link_1"/>
            <child link="virtual_roll_link_1"/>
            <origin rpy="0.0 -0.0 0.0" xyz="0.0 0.0 0.0"/>
            <limit effort="1000" lower="-1000" upper="1000" velocity="1000"/>
        </joint>
        <link name="virtual_roll_link_1">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.1"/>
                </geometry>
                <material name="black"/>
            </visual>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.0296308777857"/>
                <mass value="0.5"/>
                <inertia ixx="0.0023807995811" ixy="0.0" ixz="0.0" iyy="0.00184565189114" iyz="0.0" izz="0.00143514768996"/>
            </inertial>
        </link>
        <joint name="virtual_prismatic_joint" type="prismatic">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="virtual_roll_link_1"/>
            <child link="virtual_prismatic_link"/>
            <origin rpy="0.0 -0.0 0.0" xyz="0.0 0.0 0.0"/>
            <limit effort="1000" lower="-1000" upper="1000" velocity="1000"/>
        </joint>
        <link name="virtual_prismatic_link">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.1"/>
                </geometry>
                <material name="red"/>
            </visual>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.0296308777857"/>
                <mass value="0.5"/>
                <inertia ixx="0.0023807995811" ixy="0.0" ixz="0.0" iyy="0.00184565189114" iyz="0.0" izz="0.00143514768996"/>
            </inertial>
        </link>
        <joint name="virtual_yaw_joint_2" type="revolute">
            <axis xyz="0 0 1" rpy="0 0 0" />
            <parent link="virtual_prismatic_link"/>
            <child link="virtual_yaw_link_2"/>
            <origin rpy="0.0 -0.0 0.0" xyz="0.0 0.0 0.0"/>
            <limit effort="1000" lower="-1000" upper="1000" velocity="1000"/>
        </joint>
        <link name="virtual_yaw_link_2">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.1"/>
                </geometry>
                <material name="gray"/>
            </visual>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.0296308777857"/>
                <mass value="0.5"/>
                <inertia ixx="0.0023807995811" ixy="0.0" ixz="0.0" iyy="0.00184565189114" iyz="0.0" izz="0.00143514768996"/>
            </inertial>
        </link>
        <joint name="virtual_pitch_joint_2" type="revolute">
            <axis xyz="0 1 0" rpy="0 0 0" />
            <parent link="virtual_yaw_link_2"/>
            <child link="virtual_pitch_link_2"/>
            <origin rpy="0.0 -0.0 0.0" xyz="0.0 0.0 0.0"/>
            <limit effort="1000" lower="-1000" upper="1000" velocity="1000"/>
        </joint>
        <link name="virtual_pitch_link_2">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.1"/>
                </geometry>
                <material name="green"/>
            </visual>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.0296308777857"/>
                <mass value="0.5"/>
                <inertia ixx="0.0023807995811" ixy="0.0" ixz="0.0" iyy="0.00184565189114" iyz="0.0" izz="0.00143514768996"/>
            </inertial>
        </link>
        <joint name="virtual_roll_joint_2" type="revolute">
            <axis xyz="1 0 0" rpy="0 0 0" />
            <parent link="virtual_pitch_link_2"/>
            <child link="virtual_roll_link_2"/>
            <origin rpy="0.0 -0.0 0.0" xyz="0.0 0.0 0.0"/>
            <limit effort="1000" lower="-1000" upper="1000" velocity="1000"/>
        </joint>
        <link name="virtual_roll_link_2">
            <visual>
                <geometry>
                    <cylinder radius="0.01" length="0.1"/>
                </geometry>
                <material name="yellow"/>
            </visual>
            <inertial>
                <origin rpy="0 0 0" xyz="0 0 0.0296308777857"/>
                <mass value="0.5"/>
                <inertia ixx="0.0023807995811" ixy="0.0" ixz="0.0" iyy="0.00184565189114" iyz="0.0" izz="0.00143514768996"/>
            </inertial>
        </link>
    </xacro:macro>

</robot>
